<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu小技巧：查看软件包版本及安装位置]]></title>
    <url>%2F2018%2F09%2F29%2Fview-ubuntu-software-info%2F</url>
    <content type="text"><![CDATA[本文以chromium浏览器软件来进行示例和讲解 查看软件版本信息 aptitude show xxx 安装aptitude: sudo apt-get install aptitude 运行查看chromium-browser软件信息： aptitude show chromium-browser 123456789101112131415161718192021~$ aptitude show chromium-browserPackage: chromium-browserVersion: 69.0.3497.81-0ubuntu0.18.04.1State: installedAutomatically installed: noPriority: optionalSection: universe/webMaintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;Architecture: amd64Uncompressed Size: 213 MDepends: .......PreDepends: dpkg (&gt;= 1.15.6)Recommends: chromium-browser-l10nSuggests: webaccounts-chromium-extension, unity-chromium-extension, adobe-flashpluginConflicts: chromium-browser-inspector, chromium-browser-inspector:i386, chromium-browser:i386Replaces: chromium-browser-inspector, chromium-browser-inspector:i386Provides: chromium-browser-inspector, www-browserDescription: Chromium web browser, open-source version of Chrome An open-source browser project that aims to build a safer, faster, and more stable way for all Internet users to experience the web.Homepage: https://chromium.googlesource.com/chromium/src/ 可见，aptitude show命令将输出所查软件的包名、版本、维护人、依赖包列表、描述、主页等等信息。结果信息相当丰富。 apt-show-versions xxx 安装 apt-show-versions: sudo apt-get install apt-show-versions 运行查看chromium-browser软件信息： apt-show-versions chromium-browser 1234~$ apt-show-versions chromium-browserchromium-browser:amd64/bionic-security 69.0.3497.81-0ubuntu0.18.04.1 uptodatechromium-browser:i386 not installed 可见，apt-show-versions命令仅只打印所查软件的版本信息。 查看软件包是否安装 - dpkg dpkg -l | grep xxx 1234~$ dpkg -l | grep chromium-browserii chromium-browser 69.0.3497.81-0ubuntu0.18.04.1 amd64 Chromium web browser, open-source version of Chromeii chromium-browser-l10n 69.0.3497.81-0ubuntu0.18.04.1 all chromium-browser language packages 查看软件包安装位置 - dpkg dpkg -L xxx 123456789101112131415161718192021~$ dpkg -L chromium-browser/./etc/etc/chromium-browser/etc/chromium-browser/customizations/etc/chromium-browser/customizations/00-example/etc/chromium-browser/default/etc/chromium-browser/policies/etc/chromium-browser/policies/managed/etc/chromium-browser/policies/recommended/etc/default/etc/default/chromium-browser/usr/usr/bin/usr/bin/chromium-browser/usr/lib/usr/lib/chromium-browser/usr/lib/chromium-browser/MEIPreload/usr/lib/chromium-browser/MEIPreload/manifest.json......]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Tutorial</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Maven]]></title>
    <url>%2F2018%2F09%2F27%2Fuse-maven%2F</url>
    <content type="text"><![CDATA[Maven简介什么是MavenMaven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。 Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。 在多个开发团队环境时，Maven可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。 Maven提供了开发人员的方式来管理： Builds Documentation Reporting Dependencies SCMs Releases Distribution mailing list 概括地说，Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。 Maven目标Maven主要目标是提供给开发人员： 项目是可重复使用，易维护，更容易理解的一个综合模型。 插件或交互的工具，这种声明性的模式。 Maven项目的结构和内容在一个XML文件中声明，pom.xml 项目对象模型（POM），这是整个Maven系统的基本单元。 Maven常用概念 Maven本地资源库 Maven 的本地资源库是用来存储项目的依赖库，默认的文件夹是 “.m2” 目录，可能需要将其更改为另一个文件夹。 Maven中央存储库 Maven 中央存储库是 Maven 用来下载所有项目的依赖库的默认位置。 Maven坐标（Coordinate） Maven坐标定义了一组标识，它们可以用来唯一标识一个项目，一个依赖，或者MavenPOM里的一个插件，看一下下面的这个POM文件 123456789101112131415161718192021&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.4.0&lt;/modelVersion&gt; &lt;groupId&gt;mavenbook&lt;/groupId&gt; &lt;artifactId&gt;mybook&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;Maven Quick Start Archetype&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/denpendency&gt; &lt;/denpendencies&gt;&lt;/project&gt; 这个项目的坐标：groupId、artifactId、version 和 packaging。这些组合的标识符拼成了一个项目的坐标，就像任何其它的坐标系统，一个Maven坐标是一个地址，即“空间”里的某个点：从一般到特殊。当一个项目通过依赖，插件或者父项目引用和另外一个项目关联的时候，Maven通过坐标来精确定位一个项目。Maven坐标通常用冒号来作为分隔符来书写，像这样的格式: groupId:artifactId:packaging:version。在上面的pom.xml中，它的坐标可以表示为 mavenbook:my-app:jar:1.0-SNAPSHOT.这个符号也适用于项目依赖，我们的项目依赖JUnit的3.8.1版本，它包含了一个对 junit:junit:jar:3.8.1 的依赖。 groupId: 团体、公司、小组、组织、项目或者其它团体。团体标识的约定是：以创建这个项目的组织名称的逆向域名(reverse domain name)开头。来自 Sonatype 的项目有一个以 com.sonatype 开头的 groupId，而 Apache Software 的项目有以 org.apache 开头的groupId。 artifactId: 在groupId下的表示一个单独项目的唯一标识符。 version: 一个项目的特定版本。发布的项目有一个固定的版本标识来指向该项目的某一个特定的版本。而正在开发中的项目可以用一个特殊的标识，这种标识给版本加上一个“SNAPSHOT”的标记。 项目的打包格式也是Maven坐标的重要组成部分，但是它不是项目唯一标识符的一个部分。一个项目的 groupId:artifactId:version 使之成为一个独一无二的项目；你不能同时有一个拥有同样的 groupId、artifactId 和 version 标识的项目。 packaging: 项目的类型，默认是jar，描述了项目打包后的输出。类型为jar的项目产生一个JAR文件，类型为war的项目产生一个web应用。 在其它“Maven化”项目构成的巨大空间中，这四个元素是定位和使用某个特定项目的关键因素。Maven仓库(repositories)（公共的，私有的，和本地的）是通过这些标识符来组织的。当一个项目被安装到本地的Maven仓库，它立刻能被任何其它的项目所使用。而我们所需要做的只是，在其它项目用使用Maven的唯一坐标来加入对这个特定构件的依赖。 安装配置Maven无论是Windows还是Ubuntu，安装配置Maven的基本步骤大致相似，一般都按照下载、解压、配置环境变量、验证等几步走。 本文以Ubuntu变例来进行记录。 下载Maven从Apache Maven下载apache-maven-3.5.4-bin.tar.gz: 1$ wget http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz 解压下载包到安装目录解压apache-maven-3.5.4-bin.tar.gz到HOME目录：1$ tar zxvf apache-maven-3.5.4-bin.tar.gz -C ~ 配置Maven环境变量在 /etc/profile 或 ~/.profile 中添加Maven环境变量：123export M2_HOME=/home/username/apache-maven-3.3.91PATH=$M2_HOME/bin:$PATH 注： Ubuntu中可以直接用命令来完成Maven安装。$ sudo apt-get install maven Windows系统的环境变量配置和JDK类似： 验证安装是否成功12345678$ mvn -v1Apache Maven 3.5.2Maven home: /usr/share/mavenJava version: 1.8.0_144, vendor: Oracle CorporationJava home: /home/username/Java/jdk1.8/jreDefault locale: en_US, platform encoding: UTF-8OS name: "linux", version: "4.15.0-36-generic", arch: "amd64", family: "unix" 配置本地仓库不修改配置的话，下载的文件都会保存到本地仓库 ~/.m2/repository 中。若需指定本地仓库，可修改 $M2_HOME/conf/settings.xml 或将其 copy 到 ~/.m2/settings.xml 再修改 为指定目录。 1&lt;localRepository&gt;/home/username/.m2/localRepository&lt;/localRepository&gt; 配置m2eclipse在较新的Eclipse中已经集成了m2eclipse，打开 Windows-&gt;Preferences，可以看到Maven相关的配置项。 You can install the lastest M2Eclipse release (1.8.3) by using the following update site from within Eclipse: http://download.eclipse.org/technology/m2e/releases There are also development builds available. Information on how to install those can be found here. 值得注意的是Embedded内置的默认maven版本是我们即将要修改的，可以通过Add按钮来选择新安装的Maven进行添加。 新建Demo项目使用mvn命令新建Maven项目使用 mvn 命令生成Maven项目，需要按照提示选择项目的Archetype并设置正确的Maven坐标(Group Id, Artifact Id, Version)及类包名(Package)。12345678910111213141516171819202122232425262728293031323334$ mvn archetype:generate[INFO] Scanning for projects.........Choose archetype:......Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7: ......Define value for property 'groupId': com.eric.mvndemoDefine value for property 'artifactId': hellomavenDefine value for property 'version' 1.0-SNAPSHOT: : Define value for property 'package' com.eric.mvndemo: : hellomavenConfirm properties configuration:groupId: com.eric.mvndemoartifactId: hellomavenversion: 1.0-SNAPSHOTpackage: hellomaven Y: : [INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.1[INFO] ----------------------------------------------------------------------------[INFO] Parameter: basedir, Value: /home/username/Workspace[INFO] Parameter: package, Value: hellomaven[INFO] Parameter: groupId, Value: com.eric.mvndemo[INFO] Parameter: artifactId, Value: hellomaven[INFO] Parameter: packageName, Value: hellomaven[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] project created from Old (1.x) Archetype in dir: /home/username/Workspace/hellomaven[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 02:16 min[INFO] Finished at: 2018-09-27T16:37:15+08:00[INFO] Final Memory: 17M/260M[INFO] ------------------------------------------------------------------------ 使用Eclipse向导新建Maven项目 选择“Maven Project” 选择项目名和位置 选择 Archetype这里我们创建的是一个简单的Java Demo项目，使用缺省选项即可。 输入 Archetype 参数即设置项目的Maven坐标(Group Id, Artifact Id, Version)及类包名(Package)等。 项目结构 参考：标准Maven项目结构 编写项目代码 编写主代码 1234567891011package com.eric.mvndemo;public class HelloMaven &#123; public String sayHello() &#123; return "Hello, maven!"; &#125; public static void main(String[] args) &#123; System.out.println((new HelloMaven()).sayHello()); &#125;&#125; 编写junit测试代码 123456789101112package com.eric.mvndemo;import static org.junit.Assert.*;import org.junit.Test;public class HelloMavenTest &#123; @Test public void testSayHello() &#123; String rst = (new HelloMaven()).sayHello(); assertEquals("Hello, maven!", rst); &#125;&#125; 编写 pom.xml12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.eric&lt;/groupId&gt; &lt;artifactId&gt;mvndemo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;Maven Demo&lt;/name&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; pom.xml 修改保存后，需要在项目节点 mvndemo 上右击弹出菜单选择执行 Maven-&gt;Update Project…以更新项目的Maven Dependencies相关依赖jar包。 编译构建Maven项目运行 mvn 命令 常用的 mvn 命令 Goals 1234clean 清理项目compile 编译项目代码test 执行测试代码package 打包Java项目 运行 mvn 命令在 pom.xml 所在目录下执行 mvn 命令。 如下命令将完成对项目的清理、测试和打包：12345678910111213141516171819202122232425$ ~/Workspace/mvndemo$ mvn clean test package[INFO] Scanning for projects...[INFO] [INFO] ------------------------------------------------------------------------[INFO] Building Maven Demo 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------......------------------------------------------------------- T E S T S-------------------------------------------------------Running com.eric.mvndemo.HelloMavenTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 secResults :Tests run: 1, Failures: 0, Errors: 0, Skipped: 0......[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 4.151 s[INFO] Finished at: 2018-09-27T15:43:46+08:00[INFO] Final Memory: 21M/193M[INFO] ------------------------------------------------------------------------ 执行成功后，一个新的项目打包文件 mvndemo-0.0.1-SNAPSHOT.jar 将生成在target目录中。 通过 Eclipse 运行 Maven也可以通过Eclipse的”Run As-&gt;Maven build”来运行 Maven 命令，初次运行需要进行配置。 Maven build 配置 主要是需要对 Goals 进行设置。 无响应问题处理 在 Eclipse 执行 Maven 会发现没任何响应，控制台也没任何信息输出。这时，需要对 JRE 进行配置，增加一个VM参数： -Dmaven.multiModuleProjectDirectory=$M2_HOME 构建可运行的jar一个可运行的jar中，需要在其 META-INF/MANIFEST.MF 中指定正确的 Main-Class。 为了构建这样的jar，我们需要对 pom.xml 进行配置以指导生成正确的 MANIFEST.MF。这需要借助 Maven 的 shade 插件 maven-shade-plugin。1234567891011121314151617181920212223242526272829303132333435&lt;project&gt; ...... &lt;build&gt; ...... &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;transformers&gt; &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt; &lt;manifestEntries&gt; &lt;Main-Class&gt;com.eric.mvndemo.HelloMaven&lt;/Main-Class&gt; &lt;X-Compile-Source-JDK&gt;1.8&lt;/X-Compile-Source-JDK&gt; &lt;X-Compile-Target-JDK&gt;1.8&lt;/X-Compile-Target-JDK&gt; &lt;/manifestEntries&gt; &lt;/transformer&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 如此，通过 mvn package 生成的 jar 将是一个可运行的jar.12$ ~/Workspace/mvndemo$ java -jar ./target/mvndemo-0.0.1-SNAPSHOT.jar Hello, maven! 参考： Setting Manifest Entries with the ManifestResourceTransformer]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Maven</category>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>ReadingNotes</tag>
        <tag>Maven</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 分支操作]]></title>
    <url>%2F2017%2F12%2F01%2Fgithub-branch-operation%2F</url>
    <content type="text"><![CDATA[初始化提交 建立 git 仓库 1git init 将项目的所有文件添加到仓库中 1git add . 将 add 的文件 commit 到仓库 1git commit -am "xxx" 登录 github，创建自己的 Repository 将本地的仓库关联到 github 上 1git remote add origin git@github.com:zhengdao/repository.git 注： 当使用 SSH 方式时，应当使用 Github 的 git 协议，否则每次 push 都会提示输入Github 的用户名和密码。 pull 一下 1git pull origin master 上传代码到 github 远程仓库 1git push -u origin master 查看分支1git branch 创建分支1git branch branchname 切换分支1git checkout branchname 提交分支1git push -u origin branchname 分支合并1git merge branchname 删除分支1git branch -D branchname 1git push origin :branchname 注：删除分支之前，需要对 Github 分支进行设置，将默认分支设成另外的非删除分支。例如：当前有两个分支 master 和 gh-pages，现想删除 master 分支。那么需先将默认分支切换成 gh-pages 然后再用命令进行删除。 切换远端库地址 查看当前远端库绑定 1git git remote -v 显示： 123$ git remote -vorigin https://github.com/zhengdao/repository.git (fetch)origin https://github.com/zhengdao/repository.git (push) 删除当前远端库绑定 1git remote rm origin 重新绑定远端库地址 1git remote add origin git@github.com:zhengdao/repository.git]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>ReadingNotes</tag>
        <tag>Version Control</tag>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坑爹的RegExp test()]]></title>
    <url>%2F2017%2F02%2F27%2Fstrang-rexExp-test%2F</url>
    <content type="text"><![CDATA[最近在公司用Javascript实现前端QuickSearch功能，偶尔触及RegExp对象的test()方法。大致有类似的代码： 1234567891011var texts = ["item1", "item2", "item3", "item4", "item5", "item6"];var pattern = new RegExp("it", "ig");function check() &#123; var len = texts.length, text, isMatched = false; for(var i = 0; i &lt; len; i++)&#123; text = texts[i]; isMatched = pattern.test(text); console.error(text + ": " + isMatched); &#125;&#125; 其结果甚是诡异，把爹坑得郁闷不已。 百思不得其解之下，只好借助网络。终于，在w3schools中找到了问题的关键所在。 原来，RegExp的对象有一个很NB的lastIndex属性，当我们调用方法 exec() 或 test()时，RegExp对象会用它来记录最近一次成功匹配后的位置，并将其作为下一次检索的起始点。只有当方法 exec() 或 test() 再也找不到可以匹配的文本时，它们会自动把 lastIndex 属性重置为 0。 12345678910111213var texts = ["item1", "item2", "item3", "item4", "item5", "item6"];var pattern = new RegExp("it", "ig");function check() &#123; var len = texts.length, text, isMatched = false; for(var i = 0; i &lt; len; i++)&#123; text = texts[i]; var result = "LastIndex: " + pattern.lastIndex; isMatched = pattern.test(text); result = result + " " + text + ": " + isMatched; console.error(result); &#125;&#125; 如此，在”item2”, “item4”, “item6”中从索引位置2开始检索关键字“it”，当然是找不到的了。因为对同一个RegExp对象而言，“终点即起点，执着何用。”显然，我们需要从头开始，从0开始。我们需要在做完一次exec() 或 test()后手动将lastIndex重新设置为0。例如： 123456789101112131415var texts = ["item1", "item2", "item3", "item4", "item5", "item6"];var pattern = new RegExp("it", "ig");function check() &#123; var len = texts.length, text, isMatched = false; for(var i = 0; i &lt; len; i++)&#123; text = texts[i]; var result = "LastIndex: " + pattern.lastIndex; isMatched = pattern.test(text); result = result + " " + text + ": " + isMatched; console.error(result); pattern.lastIndex = 0; &#125;&#125; 惟有如此，事可成也。 其实所谓“坑爹”之说，不过是遇事未能详查，徒添困扰罢了。w3schools在对RegExp的lastIndex进行解说时早已明确写明： 提示和注释 重要事项：不具有标志 g 和不表示全局模式的 RegExp 对象不能使用 lastIndex 属性。 提示：如果在成功地匹配了某个字符串之后就开始检索另一个新的字符串，需要手动地把这个属性设置为 0。 今记录于此，以鉴后来之事。]]></content>
      <categories>
        <category>软件开发</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>RIA</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to proxy a web site by apache2 in Ubuntu]]></title>
    <url>%2F2017%2F02%2F27%2Finstall-and-config-apach-in-ubuntu%2F</url>
    <content type="text"><![CDATA[Install apache2To execute the install command in terminal: sudo apt-get install apache2 Then, we can find that the apache2 has been installed in “/etc/“ directory. eric@eric:cd /etc/apache2 eric@eric:/etc/apache2$ apache2 -version Server version: Apache/2.4.7 (Ubuntu) Server built: Apr 3 2014 12:20:28 eric@eric:/etc/apache2# ls -l total 80 -rw-r--r-- 1 root root 7115 Jan 7 21:23 apache2.conf drwxr-xr-x 2 root root 4096 Jun 17 15:09 conf-available drwxr-xr-x 2 root root 4096 Jun 17 15:09 conf-enabled -rw-r--r-- 1 root root 1782 Jan 3 22:48 envvars -rw-r--r-- 1 root root 31063 Jan 3 22:48 magic drwxr-xr-x 2 root root 12288 Jun 17 15:09 mods-available drwxr-xr-x 2 root root 4096 Jun 17 15:09 mods-enabled -rw-r--r-- 1 root root 320 Jan 7 21:23 ports.conf drwxr-xr-x 2 root root 4096 Jun 17 15:08 sites-available drwxr-xr-x 2 root root 4096 Jun 17 15:09 sites-enabled Attention:After executing the install command, some echo exception messages may shown like that. AH00558: apache2: Could not reliably determine the server&apos;s fully qualified domain name, using 127.0.1.1. Set the &apos;ServerName&apos; directive globally to suppress this message (98)Address already in use: AH00072: make_sock: could not bind to address [::]:80 (98)Address already in use: AH00072: make_sock: could not bind to address 0.0.0.0:80 no listening sockets available, shutting down If so, we need to: 1) Config the “ServerName” in apache2.conf. eric@eric:cd /etc/apache2 eric@eric:cd vi apache2.conf ... ServerName localhost ... 2) End the existed process which is using the 80 socket. netstat -ap | grep 80 lsof -i:80 kill {PID} Or modify the listen socket. (See Config listening ports) Then, we can restart apache2. eric@eric:sudo /etc/init.d/apache2 restart Config listening ports We can change and add the listening ports by modifying port.conf file in “/etc/apache2/“. eric@eric:sudo vi /etc/apache2/ports.conf For example, we change the default port from 80 to 81 to avoid the in used portd. Listen 81 &lt;IfModule ssl_module&gt; Listen 443 &lt;/IfModule&gt; &lt;IfModule mod_gnutls.c&gt; Listen 443 &lt;/IfModule&gt; After changing the default port, the default site configuration (/etc/apache2/sites-enabled/000-default.conf) also need be updated. eric@eric:sudo vi /etc/apache2/sites-enabled/000-default.conf Modify &lt;VirtualHost *:80&gt; as &lt;VirtualHost *:81&gt; Config proxy or reverse proxyHere, there is a Tomcat worked in 8080 port as our J2EE server and an application named “jreport” running in it. We will config the apache to proxy it. 1. Activate proxy moduleThere are “mods-available” and “mods-enabled” two directories in apache. The “mods-available” directory includes all available module configuration files. If we want to make them take effect, they must be copied or linked into the “mods-enabled” directory. For activating the proxy module, we create some soft link for “proxy.load”, “proxy_http.load” and “proxy.conf”. eric@eric:/etc/apache2/mods-enabled$ sudo ln -s ../mods-available/proxy.load eric@eric:/etc/apache2/mods-enabled$ sudo ln -s ../mods-available/proxy_http.load eric@eric:/etc/apache2/mods-enabled$ sudo ln -s ../mods-available/proxy.conf Then, execute the a2enmod command. eric@eric:/etc/apache2$ a2enmod proxy 2. Config proxyAfter activating the proxy module, we can config the “Forward Proxy” or “Reverse Proxy” for the “jreport” application in Tomcat. Reverse Proxy Reverse proxy is the most used way. ProxyRequests Off ProxyPass /jreport ${JREPORT_SERVER}/jreport ProxyPassReverse /jreport ${JREPORT_SERVER}/jreport or ProxyRequests Off Timeout 36000 ProxyTimeout 36000 &lt;Location /jreport/&gt; ProxyPass ${JREPORT_SERVER}/jreport ProxyPassReverse ${JREPORT_SERVER}/jreport ProxyPassReverseCookiePath /jreport / &lt;/Location&gt; For easy to config, we define a variable named “JREPORT_SERVER” in “/etc/apache2/envvars”. export JREPORT_SERVER=http://192.168.0.88:8080 After restarting the apache with the latest configuration, we can access the “jreport” application with: http://localhost:81/jreport Forward Proxy For example, to control who can access your proxy: ProxyRequests On ProxyVia On &lt;Proxy *&gt; Require ip 192.168.0 &lt;/Proxy&gt; For more details, please see the official doc about [mod_proxy] [2]. Add SSL Support1. Install openssl and ssl_certeric@eric: sudo apt-get install openssl ssl_cert 2. Generate private key and certificationeric@eric: sudo mkdir /etc/apache2/ssl eric@eric: cd /etc/apache2/ssl eric@eric:/etc/apache2/ssl$ sudo openssl genrsa -des3 -out my-server.key 1024 eric@eric:/etc/apache2/ssl$ sudo openssl req -key my-server.key -x509 -out my-server.crt -config /etc/ssl/openssl.cnf -days 3650 3. Activate SSL moduleeric@eric:/etc/apache2/mods-enabled$ sudo ln -s ../mods-available/ssl.load eric@eric:/etc/apache2/mods-enabled$ sudo ln -s ../mods-available/ssl.conf eric@eric:/etc/apache2/mods-enabled$ sudo a2enmod ssl 4. Add SSL support for siteNow, we modify the default site configuration (/etc/apache2/sites-enabled/000-default.conf) to add SSL support and make non-https access use the https automatically. Usually, we config the 443 port for SSL support. &lt;VirtualHost *:81&gt; ... RewriteEngine on RewriteCond %{HTTPS} !=on RewriteRule ^/?(.*)$ https://%{SERVER_NAME}/$1 [L,R] &lt;/VirtualHost&gt; &lt;VirtualHost *:443&gt; SSLEngine on SSLCertificateFile /etc/apache2/ssl/my-server.crt SSLCertificateKeyFiel /etc/apache2/ssl/my-server.key ... &lt;/VirtualHost&gt; PostscriptI have just recorded my first attempt to proxy a web site by apache for memo.There are some other useful and complex modules in apache, such as rewrite, load balance and so on. Reference Apache official doc: [http://httpd.apache.org/docs/2.4/] [1] [1]: http://httpd.apache.org/docs/2.4/ apache doc[2]: http://httpd.apache.org/docs/2.4/mod/mod_proxy.html mode_proxy]]></content>
      <categories>
        <category>软件开发</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Apache</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
</search>
